Week 7:
   * Spend time talking about the assignment for the week.  Discuss how the
     teams budgeted the use of the screen and keyboard to make the most of 
     the resource.  Getting six hours where three people can work together
     can be difficult so talk about how the teams might leave things in a
     state that can allow a quick restart once they can get together.  Perhaps,
     decide which problems can be solved individually, budget time for that
     attempt, come together and estimate what sort of overlap could have been
     achieved were they all able to work together for the entire time.

   * Discuss whether the team had the right balance of the skills needed to
     efficiently analyze, design, code, test, and debug the solutions required.
     If not, why not?

     Review the data gathered by the students.  Where is the bulk of the time
     being spent?  Does this differ from what has been observed when working
     alone?

     We'll use this data to start to build teams.  Self-assessment can be hard
     so this isn't written in stone, just a place to begin.

   * Build teams with a balance of the desired traits.  Prioritize 
     Identification, Coding, and Testing initially.  These teams are of similar
     overall skill level.  Repeat the 1 hour programming contest on Kattis 
     using problems in the 1.4 - 2.0 range.  

     All teams are required to complete more than one problem in the ~1 hour 
     time limit.  One keyboard / screen per team, record time to analyze, rank,
     and order them as well as write down estimated time to code / test / 
     debug / get to a solution.
    
     Teams should solve the problems in their specified order using a single
     keyboard, screen with one student typing and the other recording data
     about time to code, testing time, debugging time, and final total time
     required to get to an accepted solution.

     Compare the results of the architected teams with the ones that had been
     randomly assigned.  Keeping good records helps to see if they 
     self-assessments are of high enough quality to retain.  This may take a
     couple weeks to settle out.

   * Spend some time upsolving the contest problems.  Encourage students to
     walk others through their working solutions.  Encourage the beginners to
     also present their solutions even to the seemingly trivial problems.  Have
     students ask one another about decisions they made when coding up
     solutions.

   * Assignment: See Assignment.html for a list of problems.  Keep the teams
     of three as they were in the 1-hr contest to give the teaming aspect some
     'soak time'.

     All teams need to work on speed and accuracy for the 'easy' problems.  
     They should strive for quick, efficient coding and zero rejected 
     submissions.

   * Spend at least six hours working on problems.  You are good at what you
     practice and you *need* more practice.
