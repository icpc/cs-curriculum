To give some intuition for why a greedy solution won't work, you can observe that you'll need to maintain both high energy configurations so that Johnny5 can reach far away locations where lots of oil cans are falling and high point configurations because Johnny5 needs to maximize points. Greedy solutions will typically optimize just one of these two quantities, which isn't enough.

That being said, this idea of wanting to maintain both high energy configurations and high point configurations gives rise to a initial DP solution where dp[i][j][k][l] is the maximum number of points that Johnny5 can collect given that Johnny5 is at position (i, j) in the grid at time k with l energy. The transitions for this DP solution are straightforward as given any position, Johnny5 can simply move in 4 directions and the energy and points can be updated accordingly. However, this initial idea ends up being too slow as there are O(N^2ET) states, which evaluates to about 2.5 * 10^9 possible states in the worst case.

To solve this issue, you can observe that the only points you actually need to worry about are the points where an oil can actually drops because Johnny5 doesn't collect energy or points at any other space, and there are only O(C) of these points to consider. Now, the state because dp[i][j][k] is the maximum number of points that Johnny5 can collect given that Johnny5 is near the ith can drop with position relative to the can drop specified by j (there are 5 states that matter, NESW of the can and on the can itself) with k energy. Now, to transition from this DP, we just consider all other previous oil cans and calculate the Manhattan distance from that oil can to the current oil can and use this to update the DP states. There are only O(CE) states and each transition will simply take O(CE) time (which can be made faster by using a sparse data structure to avoid storing unneeded energy levels), which is fast enough to pass.

-- Aditya Arjun
